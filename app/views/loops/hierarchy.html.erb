<% if flash[:message1] %>
	<div><%= flash[:message1] %></div>
<% end %>
<!-- <div><%= raw(@graph_json_clients) %></div> -->

<% if flash[:message2] %>
<div><%= flash[:message2] %></div>
<% end %>

<!DOCTYPE html>
<html>
<head>
	<script src="http://d3js.org/d3.v3.min.js"></script>
</head>
<body>
	<div id="header">
		<label for="search">Search: </label>
	    <input type="text" id="search" onkeyup="update(this.value)">
	</div>
	<br>
	<div>
		<label for="scale">Scale: </label>
	    <input type="number" id="scale" value="100" min="1" max="500" step="1" onchange="update_scale(this.value)">
		<label for="percent">%</label>
	</div>
	<br>
	<br>
	
<div id="viz"></div>
<style type="text/css">

circle {
  stroke-width: 1.5px;
}

line {
  stroke: #999;
}

</style>

<script type="text/javascript">

var width,
    height,
	scale = 1,
    boxWidth = 150,
    boxHeight = 40,
	padding = 5,
	vSpace = 3*(boxHeight + padding),
	hSpace = boxWidth + padding,
    radius = 35,
	name_vspace = -6,
	title_vspace = 12,
	search_term = ""
	

	var snodes = [], roots = [], max_bosses = 0;
	var json =  <%= raw(@graph_json_clients) %>
	snodes = Array.prototype.slice.call(json.nodes);
	slinks = Array.prototype.slice.call(json.links);
	
	// snodes.sort(function(a,b) {return b.direct_reports - a.direct_reports;}); not sorting because links won't work

	var number_of_roots = 0;
	// get roots and also set the default values and arrays
	for (j = 0; j < snodes.length; j++) {
		if ((snodes[j]).bosses == 0) {
			roots.push(snodes[j]);
		}
		number_of_roots += snodes[j].bosses == 0 ? 1 : 0;
		snodes[j].leaves = [];
		snodes[j].managers = [];
		snodes[j].nodeWidth = 0;
	}
		
	// set children (managers, leaves) for each node
	var parent, child, slink;
	for (j = 0; j < slinks.length; j++) {
		slink = slinks[j];
		parent = snodes[slink.source];
		child = snodes[slink.target];
		if (child.reports == 0) {
			parent.leaves.push(child);
			max_bosses = child.bosses > max_bosses ? child.bosses : max_bosses;
		} else {
			parent.managers.push(child);
		}
	}
	height = 1000 + (max_bosses * vSpace);

	function computeNodeWidth(node) {
		//	root nodes are 1 wide, others are 0 because they are under another node
		var nodeWidth = node.leaves.length > 0 ? 1 : 0;
		for(var k = 0; k < node.managers.length; k++) {
			node.managers[k].nodeWidth = computeNodeWidth(node.managers[k]);
			nodeWidth += node.managers[k].nodeWidth;
		}
		return nodeWidth;		
	}

	// compute width per node from the roots
	width = 500;
	for (j = 0; j < roots.length; j++) {
		roots[j].nodeWidth += computeNodeWidth(roots[j]);
		width += (roots[j].nodeWidth * hSpace);
	}
		
	// layout the x, y for each node relative to the parent node, like a stair case from the root
	var cnode, currentX = hSpace;
	for (var k=0; k < roots.length; k++) {
		cnode = roots[k];
		cnode.x = currentX;
		cnode.y = vSpace;
		layout_children(cnode);
		// move managers to the center of their width
		if (cnode.nodeWidth > 1) {
			cnode.x += (((cnode.nodeWidth-1) * hSpace)/2)
		}
		currentX += (cnode.nodeWidth * hSpace);
	}
		
	function layout_children(node) {
		// layout leaves directly under node
		var m, dnode, nodeX = 0;
		if (node.leaves.length > 0) {
			for (m = 0; m < node.leaves.length; m++) {
				dnode = node.leaves[m];
				dnode.x = node.x;
				dnode.y = node.y + vSpace + (boxHeight*m);
			}
			nodeX += hSpace;
		}
		for (m = 0; m < node.managers.length; m++) {
			dnode = node.managers[m];
			dnode.x = node.x + nodeX;
			dnode.y = node.y + vSpace;
			layout_children(dnode);
			nodeX += (dnode.nodeWidth * hSpace);
		}		
	}

    var legend_dataset = [
        [ 
            {view: "Positive"}
        ],
        [
        	{view: "Negative"}
        ],
        [
        	{view: "Neutral"}
        ],
        [
        	{view: ""}
        ]
    ];
	
	var color_hash = {  0 : ["Positive", "#1f77b4"],
    					1 : ["Negative", "#d62728"],
    					2 : ["Neutral", "#8c564b"],
					    3 : ["No Entry", "#7f7f7f"]
					  }                      					
    
	var force = d3.layout.force()
		.gravity(0)
	    .charge(0)
		.linkStrength(0)
		.friction(0)
		.alpha(0)
		.theta(0)
	    .size([width, height]);
		
	var svg = d3.select("body").append("svg:svg")
	    .attr("width", width)
	    .attr("height", height);

	var link = svg.selectAll("line")
	    .data(json.links)
	    .enter().append("svg:line")  
	    .attr("class", "link")
	    .style("stroke", "#000000")
	    .style("stroke-width", 1.0);

  	var node = svg.selectAll(".node")
  		.data(snodes)
    	.enter()
		.append("g")
      	.attr("class", "node")
      	.call(force.drag);
  	
  	node.append("rect")
	   .attr("x", -boxWidth/2)
	   .attr("y", -boxHeight/2)
	   .attr("width", boxWidth)
	   .attr("height", boxHeight)
       .style("stroke", "black" )
       .style("fill", function(d) { 
			if (d.view == "Positive") return "#1f77b4";
			if (d.view == "Negative") return "#d62728";
			if (d.view == "Neutral") return "#8c564b"; 
			return "#7f7f7f";})
       .style("stroke-width", 1.0);
	
  	node.append("text")
      	.attr("text-anchor", "middle")
      	.attr("dy", name_vspace)
	    .attr("class", "name_label")
	  	.style("fill", "white")
      	.text(function(d) { return d.name;});

	node.append("text")
	  	.attr("text-anchor", "middle")
	  	.attr("dy", title_vspace)
	    .attr("class", "title_label")
	  	.style("fill", "white")
	  	.text(function(d) { return d.title;});

	// add legend   
	var legend = svg.append("g")
		.attr("class", "legend")
	  	.attr("height", 100)
	  	.attr("width", 100)
      	.attr('transform', 'translate(0,10)');

	legend.selectAll('circle')
     	.data(legend_dataset)
	    .enter()
	    .append("circle")
		.attr("cx", radius/2)
	    .attr("cy", function(d, i){ return i *  30;})
		.attr("r", 10)
  		.style("fill", function(d) { 
	      return color_hash[legend_dataset.indexOf(d)][1];
	    })
		  
	legend.selectAll('text')
		.data(legend_dataset)
  	   	.enter()
	   	.append("text")
		.attr("x", radius/2 + 13)
	    .attr("y", function(d, i){ return i *  30 + 4;})
		.text(function(d) {
	  		return color_hash[legend_dataset.indexOf(d)][0];
	  	});
		
	force.nodes(snodes)
	      .links(json.links)
	      .start();

  	force.on("tick", function(e) {		  	
      link.attr("x1", function(d) { return d.source.x * scale; })
          .attr("y1", function(d) { return d.source.y * scale; })
          .attr("x2", function(d) { return d.target.x * scale; })
          .attr("y2", function(d) { return d.target.y * scale; });
    
      node.attr("transform", function(d) { return "translate(" + (d.x * scale) + "," + (d.y * scale) + ")"; });
	  force.stop();
    });

	function update(query) {
	  	if (query != search_term && query != "") {
			node.select("rect")
				.style("stroke-width", function(d) {
	  				var match = (d.name.indexOf(query) != -1) || (d.title.indexOf(query) != -1) || (d.notes.indexOf(query) != -1);
	  				return ( match ? 5 : 1);
				})
				.style("fill-opacity", function(d) {
		  			var match = (d.name.indexOf(query) != -1) || (d.title.indexOf(query) != -1) || (d.notes.indexOf(query) != -1);
		  			return ( match ? 1 : .3);
				});
	  	} else if (query == "") {
			node.select("rect")
				.style("stroke-width", 1)
				.style("fill-opacity", 1);
		}
		search_term = query;
	};

	function update_scale(new_scale) {
	  	if (new_scale/100 != scale && new_scale > 0) {
			scale = new_scale/100;
		
	      	link.attr("x1", function(d) { return d.source.x * scale; })
	          .attr("y1", function(d) { return d.source.y * scale; })
	          .attr("x2", function(d) { return d.target.x * scale; })
	          .attr("y2", function(d) { return d.target.y * scale; });

			node.attr("transform", function(d) { return "translate(" + (d.x * scale) + "," + (d.y * scale) + ")"; });
			node.select("rect")
				.attr("x", (-boxWidth/2) * scale)
		   		.attr("y", (-boxHeight/2) * scale)
				.attr("width", boxWidth*scale)
			   	.attr("height", boxHeight*scale);
			node.select('.name_label')
				.attr("dy", name_vspace*scale)	      	
				.attr("font-size", (scale*100) + "%");
			node.select('.title_label')
				.attr("dy", title_vspace*scale)	      	
				.attr("font-size", (scale*100) + "%");
			svg
			    .attr("width", width*scale)
			    .attr("height", height*scale);
				
		}
	};

</script>