Clients
<% if flash[:message1] %>
	<div><%= flash[:message1] %></div>
<% end %>
<div><%= raw(@graph_json_clients) %></div>

<% if flash[:message2] %>
<div><%= flash[:message2] %></div>
<% end %>


<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
</head>
<body>
<div id="viz"></div>
<style type="text/css">

circle {
  stroke-width: 1.5px;
}

line {
  stroke: #999;
}

    </style>

<script type="text/javascript">

var width = 1200,
    height = 1000,
    boxWidth = 150,
    boxHeight = 40,
    radius = 35

	var w = 1200,
	    h = 1000,
	    r = 6,
	    fill = d3.scale.category20();
		
		var force = d3.layout.force()
		.gravity(.1)
		    .charge(-500)
		    .linkDistance(140)
		.linkStrength(.2)
		    .size([w, h]);
		
// var svg = d3.select("body").append("svg")
//     .attr("width", width)
//     .attr("height", height);
	var svg = d3.select("body").append("svg:svg")
	    .attr("width", w)
	    .attr("height", h);

var json =  <%= raw(@graph_json_clients) %>

// var json = /* <%= raw(@myInMemoryObject) %> */ {
//     "nodes":[{"name":"Damien","id":"a"}, {"name":"Bob","id":"b"}],
//     "links":[{"source":0, "target":1,"value":1}]
// }

// var force = d3.layout.force()
//     .gravity(.1)
//     .distance(175)
//     .charge(-70)
//     .size([width, height]);

	var link = svg.selectAll("line")
	      .data(json.links)
	    .enter().append("svg:line")  
	    .attr("class", "link")
	      .style("stroke", "#000000")
	      .style("stroke-width", 1.0);

	
  // var link = svg.selectAll(".link")
  //     .data(json.links)
  //   .enter().append("line")
  //     .attr("class", "link")
  //     .style("stroke", "#000000")
  //     .style("stroke-width", 1.0);

  var node = svg.selectAll(".node")
      .data(json.nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(force.drag);

	node.append("rect")
	   .attr("x", -boxWidth/2)
	   .attr("y", -boxHeight/2)
	   .attr("width", boxWidth)
	   .attr("height", function(d) { return d.title =="" ? boxHeight/2 : boxHeight;})
       .style("stroke", "#000000")
       .style("fill", "white")
       .style("stroke-width", 2.0);
	
  	node.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "-.4em")
      .text(function(d) { return d.name;});

	node.append("text")
	    	.attr("text-anchor", "middle")
	    	.attr("dy", ".8em")
	    	.text(function(d) { return d.title;});

	  force
	      .nodes(json.nodes)
	      .links(json.links)
	      .start();

  force.on("tick", function(e) {
	var k = 1 * e.alpha;
	    // json.links.forEach(function(d, i) {
	    //   d.source.y -= k;
	    //   d.target.y += k;
	    // });
	json.nodes.forEach(function(d, i) {
		d.x -= d.reports*k
	});
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
    // .each(collide(1))
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  });
  
  // resolves collisions vertically using boxHeight
  function collide(alpha) {
    var quadtree = d3.geom.quadtree(nodes);
    return function(d) {
      var r = boxHeight + padding,
                      nx1 = d.x - r,
                      nx2 = d.x + r,
                      ny1 = d.y - r,
                      ny2 = d.y + r;
                  quadtree.visit(function(quad, x1, y1, x2, y2) {
                    if (quad.point && (quad.point !== d)) {
                      var x = d.x - quad.point.x,
                          y = d.y - quad.point.y,
                          l = Math.sqrt(x * x + y * y),
                          r = boxHeight;
                      if (l < r) {
                        l = (l - r) / l * alpha;
                        d.x -= x *= l;
                        d.y -= y *= l;
                        quad.point.x += x;
                        quad.point.y += y;
                      }
                    }
                    return x1 > nx2
                        || x2 < nx1
                        || y1 > ny2
                        || y2 < ny1;
                });
      }
    };
</script>