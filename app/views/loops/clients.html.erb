Clients
<% if flash[:message1] %>
	<div><%= flash[:message1] %></div>
<% end %>
<!-- <div><%= raw(@graph_json_clients) %></div> -->

<% if flash[:message2] %>
<div><%= flash[:message2] %></div>
<% end %>


<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
</head>
<body>
<div id="viz"></div>
<style type="text/css">

circle {
  stroke-width: 1.5px;
}

line {
  stroke: #999;
}

    </style>

<script type="text/javascript">

var width = 1200,
    height = 1200,
    boxWidth = 150,
    boxHeight = 40,
    radius = 35,
	padding = 5

	var w = 1200,
	    h = 1000,
	    r = 6,
	    fill = d3.scale.category20();
		
		var force = d3.layout.force()
			.gravity(.1)
			// .friction(.8)
		    .charge(-500)
		    .linkDistance(function(d) {return 60 + (d.source.direct_reports > 0 ? 5 * d.source.direct_reports : 0)})
		    .linkStrength(function(d) { return (d.source.direct_reports > 0 ? 1/Math.sqrt(4*d.source.direct_reports) : 1) })
		    .size([width, height]);
		
	var svg = d3.select("body").append("svg:svg")
	    .attr("width", width)
	    .attr("height", height);

	var json =  <%= raw(@graph_json_clients) %>

	var link = svg.selectAll("line")
	      .data(json.links)
	    .enter().append("svg:line")  
	    .attr("class", "link")
	      .style("stroke", "#000000")
	      .style("stroke-width", 1.0);

  	var node = svg.selectAll(".node")
  		.data(json.nodes)
    	.enter().append("g")
      	.attr("class", "node")
      	.call(force.drag);

	node.append("rect")
	   .attr("x", -boxWidth/2)
	   .attr("y", -boxHeight/2)
	   .attr("width", boxWidth)
	   .attr("height", function(d) { return d.title =="" ? boxHeight/2 : boxHeight;})
       .style("stroke", function(d) { 
			if (d.view == "Positive") return "#1f77b4";
			if (d.view == "Negative") return "#d62728";
			if (d.view == "Neutral") return "#8c564b"; 
			return "#7f7f7f";})
       .style("fill", "white")
       .style("stroke-width", 3.0);
	
  	node.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "-.4em")
      .text(function(d) { return d.name;});

	node.append("text")
	    	.attr("text-anchor", "middle")
	    	.attr("dy", ".8em")
	    	.text(function(d) { return d.title;});

	  force
	      .nodes(json.nodes)
	      .links(json.links)
	      .start();

  force.on("tick", function(e) {
		var k = 1 * e.alpha;
	    json.links.forEach(function(d, i) {
	      d.target.y -= d.target.reports*k;
	      d.source.y += d.source.reports*k;
		  // if (d.target.x < boxWidth + padding) d.target.x = boxWidth + padding;
		  if (d.target.y < boxHeight + padding) d.target.y = boxHeight + padding;
		  d.source.y = (d.target.y - d.source.y < boxHeight + padding) ? d.target.y - boxHeight - padding : d.source.y;	
	    });
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  });
  
</script>