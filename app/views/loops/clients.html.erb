Clients
<% if flash[:message1] %>
	<div><%= flash[:message1] %></div>
<% end %>
<!-- <div><%= raw(@graph_json_clients) %></div> -->

<% if flash[:message2] %>
<div><%= flash[:message2] %></div>
<% end %>


<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
</head>
<body>
<div id="viz"></div>
<style type="text/css">

circle {
  stroke-width: 1.5px;
}

line {
  stroke: #999;
}

</style>

<script type="text/javascript">

var width = 1400,
    height = 1200,
    boxWidth = 150,
    boxHeight = 40,
    radius = 35,
	padding = 5
		
	var force = d3.layout.force()
	// .gravity(.01)
	.gravity(0)
			// .friction(.8)
		    .charge(0)
		.linkStrength(0)
		    // .linkDistance(function(d) {return 60 + (d.source.direct_reports > 0 ? 5 * d.source.direct_reports : 0)})
		    // .linkStrength(function(d) { return (d.source.direct_reports > 0 ? 1/Math.sqrt(3*d.source.direct_reports) : 1) })
		    .size([width, height]);
		
	var svg = d3.select("body").append("svg:svg")
	    .attr("width", width)
	    .attr("height", height);

	var json =  <%= raw(@graph_json_clients) %>

	var link = svg.selectAll("line")
	      .data(json.links)
	    .enter().append("svg:line")  
	    .attr("class", "link")
	      .style("stroke", "#000000")
	      .style("stroke-width", 1.0);

  var node = svg.selectAll(".node")
  		.data(json.nodes)
    	.enter().append("g")
      	.attr("class", "node")
      	.call(force.drag);
      	
  node.append("rect")
	   .attr("x", -boxWidth/2)
	   .attr("y", -boxHeight/2)
	   .attr("width", boxWidth)
	   .attr("height", boxHeight)
	   // .attr("height", function(d) { return d.title =="" ? boxHeight/2 : boxHeight;})
       .style("stroke", function(d) { 
			if (d.view == "Positive") return "#1f77b4";
			if (d.view == "Negative") return "#d62728";
			if (d.view == "Neutral") return "#8c564b"; 
			return "#7f7f7f";})
       .style("fill", "white")
       .style("stroke-width", 3.0);
	
  node.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "-.4em")
      .text(function(d) { return d.name;});

	node.append("text")
	    	.attr("text-anchor", "middle")
	    	.attr("dy", ".8em")
	    	.text(function(d) { return d.title;});

	force
	      .nodes(json.nodes)
	      .links(json.links)
	      .start();

  force.on("tick", function(e) {
  		var k = 3 * e.alpha, j, target, budge = padding*k;    
        // vertical placement and center the top node(s)
  		json.nodes.forEach(function(d, i) {
			// bounds check
			d.x = (d.x < padding) ? padding : d.x;
			d.x = (d.x > width - boxWidth) ? width - boxWidth : d.x;
			d.y = (d.y < padding) ? padding : d.y;
			d.y = (d.y > height - boxHeight) ? height - boxHeight : d.y;

			// vertical spacing
			target = boxHeight + (2*boxHeight + padding) * d.bosses;
			// top node 
			if (d.bosses == 0) {
			    d.y = target;
				if (d.x > width/2) d.x -= budge;
				if (d.x < width/2) d.x += budge;
			} else {
				if (d.y > target) d.y -= budge;
				if (d.y < target) d.y += budge;
			}
			
	  	 });

		// try to stay under boss
		json.links.forEach(function(d,i) {
			// if you have no direct reports, you go directly under boss...
			if (d.target.direct_reports == 0) { 
				d.target.x = d.source.x;
				// stack the children under the boss
				var height = d.source.y + 2*boxHeight + padding;
				json.links.forEach(function(dd, ii) {
					if (dd.source == d.source && dd.target.direct_reports == 0) {
						dd.target.y = height;
						height += boxHeight + 3;
					}
				});
			} else { // direct_reports > 0
				// this test means "too far away"
				if (Math.abs(d.target.x - d.source.x) > ((d.source.direct_reports-1) * boxWidth + padding + padding)) {
					if (d.target.x > d.source.x) d.target.x -= (budge+2);
					else d.target.x += (budge+2);
				}
			}
		});

		// collision resolution
		var taken = [];
		json.nodes.forEach(function(d,i) {
			for (j = 0; j < taken.length; j++) {
				var onode = taken[j];
				if ((Math.abs(d.y - onode.y) < boxHeight + padding) && (Math.abs(d.x - onode.x) < boxWidth + padding)) {
					if (d.direct_reports > 0) {
						if (d.x < onode.x) d.x -= budge;
						else d.x += budge;
					}
					if (onode.direct_reports > 0) {
						if (d.x < onode.x) onode.x += budge;
						else onode.x -= budge;
					}
				
				// only resolve nodes at the same level
				// if (d.bosses == onode.bosses) {
						// if (d.direct_reports > 0) {
						// 			                if (d.x < onode.x) 
						// 		{ d.x -= budge; onode.x += budge; }
						// 	else
						// 		{ d.x += budge; onode.x -= budge; }
						// }
					// }
				}
			}
			taken.push(d);
		});		
  
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });
    
      node
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    });
    
</script>